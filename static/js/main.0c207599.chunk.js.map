{"version":3,"sources":["components/Cell.js","components/Row.js","helpers/helpers.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","cell","indexRow","indexCell","addActiveCells","className","active","style","background","value","onClick","Row","row","mappingEL","i","length","push","key","map","createCells","createDataObjects","values","1","2","3","4","cells","j","rand","Math","floor","random","App","indecies","state","neighbors","k","clickI","clickJ","setState","checkAllcells","filter","createRows","mappingEl","component","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c207599.chunk.js","sourcesContent":["import React from 'react';\nimport './style/cell.css';\n\nconst Cell = (props)=> {\n    const {\n        cell,\n        indexRow,\n        indexCell,\n        addActiveCells,\n    } = props;\n\n\n    return (\n        <td\n            className={cell && cell.active ? 'active': ''}\n            style={{background: cell.value }}\n            onClick = {()=>{\n                addActiveCells([{indexRow: indexRow, indexCell: indexCell}]);\n            }}\n        >\n            {cell.value}\n        </td>\n    );\n\n};\n\n\n\nexport default Cell;\n","import React from 'react';\nimport Cell from './Cell';\n\nconst Row = (props)=> {\n\n   const {\n       row,\n       indexRow,\n       addActiveCells\n   } = props;\n\n    function  createCells() {\n\n        const mappingEL = [];\n\n        for (let i = 0 ; i < row.length; i++) {\n                mappingEL.push(<Cell\n                        key={i}\n                        cell={row[i]}\n                        indexRow={indexRow}\n                        indexCell={i}\n                        addActiveCells={addActiveCells}\n                    />\n                );\n        }\n\n        return mappingEL.map(cell=>cell);\n    }\n\n    return (\n             <tr>\n                {\n                   createCells()\n                }\n             </tr>\n\n    );\n};\n\n\n\nexport default Row;\n","export function createDataObjects() {\r\n\r\n    const values = {\r\n        1: \"red\",\r\n        2: \"yellow\",\r\n        3: \"green\",\r\n        4: \"blue\",\r\n    };\r\n\r\n    let cells = [];\r\n\r\n\r\n    for (let i = 0 ; i < 7; i++) {\r\n        cells[i] = [];\r\n        for (let j = 0; j < 6; j++) {\r\n            let rand = Math.floor((Math.random()*4) +1);\r\n            cells[i][j] = {\"value\" : values[rand], \"active\": false};\r\n        }\r\n    }\r\n\r\n    return cells;\r\n}\r\n","import React from 'react';\nimport Row from './components/Row';\nimport {createDataObjects} from './helpers/helpers';\n\nimport './App.css';\n\nclass App extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            cells: [],\n        }\n    }\n\n    addActiveCells = (indecies) => {\n        const cells = this.state.cells;\n        let neighbors = [];\n\n        for (let k = 0; k < indecies.length; k++) {\n\n            let clickI = indecies[k].indexRow;\n            let clickJ = indecies[k].indexCell;\n\n            this.state.cells[clickI][clickJ].active = true;\n\n            for (let i = -1; i <= 1; i++) {\n                for (let j = -1; j <= 1; j++) {\n                    if (\n                        (i === 0 && j === 0)\n                        || clickI + i < 0\n                        || clickJ + j < 0\n                        || clickI + i > cells.length - 1\n                        || clickJ + j > cells[0].length - 1\n                    ) continue;\n                    if ((cells[clickI + i][clickJ + j].value === cells[clickI][clickJ].value) &&\n                        cells[clickI + i][clickJ + j].active === false\n                    ) {\n                        neighbors.push({indexRow: clickI + i, indexCell: clickJ + j})\n                    }\n                }\n            }\n        }\n\n        if (neighbors.length) {\n            this.addActiveCells(neighbors)\n        }\n\n\n        this.setState({\n            ...this.state,\n            cells: this.state.cells\n        });\n\n    };\n\n    checkAllcells = ()=>{\n       const filteredRows = this.state.cells.filter(row=>\n           row.filter(cell=>cell.active===false).length\n       );\n\n       return filteredRows.length;\n   };\n\n    createRows = (cells) => {\n        const mappingEl = [];\n        for (let i = 0; i < cells.length; i++ ) {\n            mappingEl.push(\n                <Row\n                    key={i}\n                    row={cells[i]}\n                    indexRow = {i}\n                    addActiveCells={this.addActiveCells}\n                />\n            );\n        }\n\n        return mappingEl.map(component => component);\n\n    };\n\n\n    componentDidMount(){\n\n       this.setState({\n           ...this.state,\n           cells: [...this.state.cells, ...createDataObjects()]\n       })\n\n    }\n    render() {\n\n\n        return (\n\n            <div className=\"App\">\n\n                {this.checkAllcells() ? null :\n                    <button\n                        onClick={()=> this.setState({\n                            ...this.state,\n                            cells: createDataObjects()\n                        })}\n                    >\n                        Restart\n                    </button>}\n\n                <table>\n                    <tbody>\n                    {this.createRows(this.state.cells)}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}